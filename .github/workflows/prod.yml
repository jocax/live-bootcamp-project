name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service/.cargo
          auth-service/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      env:
        TLS_ENABLED: false
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service
      env:
        TLS_ENABLED: false
      run: |
        cargo build --verbose
        cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create .env file
      run: |
        echo "# Environment variables for live-bootcamp-project" > .env
        echo "AUTH_SERVICE_IP=bootcamp-auth.jocax.com" >> .env
        echo "TLS_ENABLED=true" >> .env

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        push: true
        files: |
          compose.yml
          compose.override.yml
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy Application
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ vars.DROPLET_IP }}
        username: deploy
        key: ${{ secrets.QIPIO_DEPLOY_KEY }}
        script: |
          # Navigate to application directory
          cd /home/deploy/live-bootcamp
          
          # Stop current services
          docker compose down
          
          # Pull latest images
          docker compose pull
          
          # Generate certificates if they don't exist
          if [ ! -f "./letsencrypt/live/bootcamp-app.jocax.com/fullchain.pem" ]; then
            echo "Generating SSL certificates..."
            # Start nginx for ACME challenge
            docker compose --profile certbot up nginx-acme -d
            sleep 10
            # Run certbot to get certificates
            docker compose --profile certbot run --rm certbot
            # Stop nginx after certificate generation
            docker compose --profile certbot stop nginx-acme
            docker compose --profile certbot rm -f nginx-acme
          fi
          
          # Start services with latest images
          docker compose up -d
          
          # Clean up unused images and containers
          docker system prune -f
