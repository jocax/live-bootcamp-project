name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service/.cargo
          auth-service/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      env:
        TLS_ENABLED: false
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service
      env:
        TLS_ENABLED: false
      run: |
        cargo build --verbose
        cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create .env file
      run: |
        echo "# Environment variables for live-bootcamp-project" > .env
        echo "AUTH_SERVICE_HOST_NAME=auth-service" >> .env
        echo "TLS_ENABLED=true" >> .env

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        push: true
        files: |
          compose.build.yml
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    # Create TLS certificates from GitHub secrets
    - name: Create TLS certificates from secrets
      run: |
        mkdir -p deploy-certs
        echo "${{ secrets.TLS_FULL_CHAIN }}" > deploy-certs/fullchain.pem
        echo "${{ secrets.TLS_PRIVATE_KEY }}" > deploy-certs/privkey.pem
        chmod 644 deploy-certs/fullchain.pem
        chmod 644 deploy-certs/privkey.pem
        echo "✅ Created certificates from GitHub secrets"

    # Copy nginx configuration to production server
    - name: Copy nginx configuration
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.DROPLET_IP }}
        username: deploy
        key: ${{ secrets.QIPIO_DEPLOY_KEY }}
        source: "nginx.conf"
        target: "/home/deploy/live-bootcamp/"
        overwrite: true

    # Copy TLS certificates to production server
    - name: Copy TLS certificates to production server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ vars.DROPLET_IP }}
        username: deploy
        key: ${{ secrets.QIPIO_DEPLOY_KEY }}
        source: "deploy-certs/*"
        target: "/home/deploy/live-bootcamp/"
        overwrite: true

    - name: Deploy Application
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ vars.DROPLET_IP }}
        username: deploy
        key: ${{ secrets.QIPIO_DEPLOY_KEY }}
        script: |
          # Navigate to application directory
          cd /home/deploy/live-bootcamp
          
          # Stop current services
          sudo docker compose down
          
          # Pull latest images
          sudo docker compose pull
          
          # Verify certificates exist and have correct permissions
          if [ ! -f "./deploy-certs/fullchain.pem" ] || [ ! -f "./deploy-certs/privkey.pem" ]; then
            echo "ERROR: SSL certificates not found in ./deploy-certs/"
            echo "This should not happen as certificates are copied from GitHub secrets"
            exit 1
          fi
          
          # Ensure correct ownership and permissions for certificates
          sudo chown deploy:deploy ./deploy-certs/fullchain.pem ./deploy-certs/privkey.pem
          chmod 644 ./deploy-certs/fullchain.pem
          chmod 600 ./deploy-certs/privkey.pem
          echo "✅ Certificate permissions verified"
          
          # Verify nginx configuration exists
          if [ ! -f "./nginx.conf" ]; then
            echo "ERROR: nginx.conf not found"
            exit 1
          fi
          
          # Start services with latest images
          sudo docker compose up -d
          
          # Wait for services to start
          sleep 10
          
          # Verify services are responding on new paths
          echo "Testing path-based routing..."
          
          # Test app service route
          if curl -f -s https://live-bootcamp.jocax.com/app > /dev/null; then
            echo "✅ App service accessible at /app"
          else
            echo "❌ App service not accessible at /app"
            exit 1
          fi
          
          # Test auth service route  
          if curl -f -s https://live-bootcamp.jocax.com/auth > /dev/null; then
            echo "✅ Auth service accessible at /auth"
          else
            echo "❌ Auth service not accessible at /auth"
            exit 1
          fi
          
          # Test favicon
          if curl -f -s https://live-bootcamp.jocax.com/favicon.ico > /dev/null; then
            echo "✅ Favicon accessible"
          else
            echo "⚠️  Favicon not accessible (non-critical)"
          fi
          
          echo "🎉 Path-based routing deployment successful!"
          
          # Clean up unused images and containers
          docker system prune -f
